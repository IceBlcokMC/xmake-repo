diff --git a/include/bedrock/server/commands/command_registry.h b/include/bedrock/server/commands/command_registry.h
index efd477bf9..baf7268c8 100644
--- a/include/bedrock/server/commands/command_registry.h
+++ b/include/bedrock/server/commands/command_registry.h
@@ -35,7 +35,50 @@
 enum SemanticConstraint : std::uint8_t;
 
 class Command;
-class CommandParameterData;
+// class CommandParameterData;
+enum class CommandParameterDataType : int {
+    Basic = 0,
+    Enum = 1,
+    SoftEnum = 2,
+    Postfix = 3
+};
+
+enum class CommandParameterOption : std::uint8_t {
+    None = 0,
+    EnumAutocompleteExpansion = 1,
+    HasSemanticConstraint = 2,
+    EnumAsChainedCommand = 4
+};
+
+class CommandRegistry;
+struct ParseToken;
+class CommandParameterData {
+public:
+    using ParseFunction = bool (CommandRegistry::*)(void *, const ParseToken &, const CommandOrigin &, int,
+                                                    std::string &, std::vector<std::string> &) const;
+
+    CommandParameterData(Bedrock::typeid_t<CommandRegistry> type, ParseFunction parse,
+                         char const *name, CommandParameterDataType param_type, char const *enum_name,
+                         char const *fallback_typename, int offset, bool is_optional, int set_offset)
+        : type(type), parse(parse), name(name), enum_name(enum_name), fallback_typename(fallback_typename),
+          param_type(param_type), offset(offset), set_offset(set_offset), is_optional(is_optional)
+    {
+    }
+
+    Bedrock::typeid_t<CommandRegistry> type;                             // +0
+    CommandRegistry::ParseFunction parse;                                // +8
+    std::string name;                                                    // +16
+    const char *enum_name;                                               // +48
+    CommandRegistry::Symbol enum_symbol{static_cast<uint32_t>(-1)};      // +56
+    const char *fallback_typename;                                       // +64
+    CommandRegistry::Symbol fallback_symbol{static_cast<uint32_t>(-1)};  // +72
+    CommandParameterDataType param_type;                                 // +76
+    int offset;                                                          // +80
+    int set_offset;                                                      // +84
+    bool is_optional;                                                    // +88
+    CommandParameterOption options{CommandParameterOption::None};        // +89
+};
+
 
 class CommandRegistry {
 public:
@@ -306,43 +349,6 @@ private:
     ENDSTONE_HOOK void registerOverloadInternal(Signature &signature, Overload &overload);
 };
 
-enum class CommandParameterDataType : int {
-    Basic = 0,
-    Enum = 1,
-    SoftEnum = 2,
-    Postfix = 3
-};
-
-enum class CommandParameterOption : std::uint8_t {
-    None = 0,
-    EnumAutocompleteExpansion = 1,
-    HasSemanticConstraint = 2,
-    EnumAsChainedCommand = 4
-};
-
-class CommandParameterData {
-public:
-    CommandParameterData(Bedrock::typeid_t<CommandRegistry> type, CommandRegistry::ParseFunction parse,
-                         char const *name, CommandParameterDataType param_type, char const *enum_name,
-                         char const *fallback_typename, int offset, bool is_optional, int set_offset)
-        : type(type), parse(parse), name(name), enum_name(enum_name), fallback_typename(fallback_typename),
-          param_type(param_type), offset(offset), set_offset(set_offset), is_optional(is_optional)
-    {
-    }
-
-    Bedrock::typeid_t<CommandRegistry> type;                             // +0
-    CommandRegistry::ParseFunction parse;                                // +8
-    std::string name;                                                    // +16
-    const char *enum_name;                                               // +48
-    CommandRegistry::Symbol enum_symbol{static_cast<uint32_t>(-1)};      // +56
-    const char *fallback_typename;                                       // +64
-    CommandRegistry::Symbol fallback_symbol{static_cast<uint32_t>(-1)};  // +72
-    CommandParameterDataType param_type;                                 // +76
-    int offset;                                                          // +80
-    int set_offset;                                                      // +84
-    bool is_optional;                                                    // +88
-    CommandParameterOption options{CommandParameterOption::None};        // +89
-};
 
 namespace fmt {
 
